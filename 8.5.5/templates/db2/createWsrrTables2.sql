-- begin_generated_IBM_copyright_prolog

-- Licensed Materials - Property of IBM
-- 
-- 5724-N72 5655-WBS
-- 
-- Copyright IBM Corp. 2006, 2009 All Rights Reserved.
-- 
-- US Government Users Restricted Rights - Use, duplication or
-- disclosure restricted by GSA ADP Schedule Contract with
-- IBM Corp.

-- end_generated_IBM_copyright_prolog

SET CURRENT SCHEMA __DBSCHEMA__ ;

-- Policy Analytics tables
CREATE TABLE SR_ANALYTICS (
    EVENT BLOB(1048576),
    SOURCE_COMPONENT_ID VARCHAR(1020),
    REPORTER_COMPONENT_ID VARCHAR(1020),
    SITUATION INTEGER,
    CREATION_TIME TIMESTAMP NOT NULL,
    EXTENSION_NAME VARCHAR(1024),
    VERSION VARCHAR(16),
    MSG_DATA_ELEMENT_MSGLOCALE VARCHAR(11),
    MSG_DATA_ELEMENT_MSGCATLOGTKNS VARCHAR(4000),
    MSG_DATA_ELEMENT_MSGID VARCHAR(256),
    MSG_DATA_ELEMENT_MSGIDTYPE VARCHAR(32),
    MSG_DATA_ELEMENT_MSGCATALOGID VARCHAR(128),
    MSG_DATA_ELEMENT_MSGCATLOGTYPE VARCHAR(32),
    MSG_DATA_ELEMENT_MSGCATALOG VARCHAR(128),
    SITUATION_CATEGORYNAME VARCHAR(20) DEFAULT 'ReportSituation',
    SITUATION_REPORTCATEGORY CHAR(5) DEFAULT 'Log',
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL
) IN WSRRTS;

ALTER TABLE SR_ANALYTICS ADD CONSTRAINT SR_ANALYTICS_PK
    PRIMARY KEY (GLOBAL_INSTANCE_ID);
    
CREATE INDEX SR_ANALYTICS_VER_IDX ON SR_ANALYTICS (VERSION);

CREATE TABLE SR_ASSERTION (
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL,
    ASSERTION_TYPE VARCHAR(40) NOT NULL,
    ASSERTION_ID VARCHAR(120),
    ASSERTION_NAME VARCHAR(120),
    STATUS CHAR(1) DEFAULT '0' NOT NULL
) IN WSRRTS;

ALTER TABLE SR_ASSERTION ADD CONSTRAINT SR_ASSERTION_PK
    PRIMARY KEY (GLOBAL_INSTANCE_ID);

ALTER TABLE SR_ASSERTION ADD CONSTRAINT ASSN_ANYTCS_FK
    FOREIGN KEY (GLOBAL_INSTANCE_ID)
    REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
    ON DELETE CASCADE;

CREATE TABLE SR_ASSOCIATED (
    RESOLVED_RECORD VARCHAR(48) NOT NULL,
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL
) IN WSRRTS;

ALTER TABLE SR_ASSOCIATED ADD CONSTRAINT ASSCTD_ANLYTICS_FK
    FOREIGN KEY (GLOBAL_INSTANCE_ID)
    REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
    ON DELETE CASCADE;

CREATE TABLE SR_ENTITYACTION (
    OPERATION VARCHAR(20),
    ENTITY_TYPE VARCHAR(1020),
    USERID VARCHAR(64),
    ROLE CHAR(254),
    ENTITY_BSRURI VARCHAR(48),
    TRANSITION_URI VARCHAR(1020),
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL
) IN WSRRTS;

ALTER TABLE SR_ENTITYACTION ADD CONSTRAINT SR_ENTITYACTION_PK
    PRIMARY KEY (GLOBAL_INSTANCE_ID);

ALTER TABLE SR_ENTITYACTION ADD CONSTRAINT ENTYUPD_ANYTCS_FK
    FOREIGN KEY (GLOBAL_INSTANCE_ID)
    REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
    ON DELETE CASCADE;

CREATE TABLE SR_VALDTRPOLICY (
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL,
    POLICYDOMAIN VARCHAR(1020),
    POLICYID VARCHAR(1020),
    POLICYCLASS VARCHAR(1020),
    STATUS CHAR(1) DEFAULT '0' NOT NULL,
    POLICYNAME VARCHAR(1020),
    POLICYURI VARCHAR(1020),
    CREATION_TIME TIMESTAMP NOT NULL
) IN WSRRTS;

ALTER TABLE SR_VALDTRPOLICY ADD CONSTRAINT SR_VALDTRPOLICY_PK
    PRIMARY KEY (GLOBAL_INSTANCE_ID);

ALTER TABLE SR_VALDTRPOLICY ADD CONSTRAINT VALDPLCY_ANYTCS_FK
    FOREIGN KEY (GLOBAL_INSTANCE_ID)
    REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
    ON DELETE CASCADE;

CREATE TABLE SR_WMB_POLICY (
    GLOBAL_INSTANCE_ID VARCHAR(48) NOT NULL,
    TOTAL_RECEIPTS DECIMAL(19,0) NOT NULL,
    TOTAL_RECEIPT_SUCCESS DECIMAL(19,0) NOT NULL,
    TOTAL_RECEIPT_FAULTS DECIMAL(19,0) NOT NULL,
    TOTAL_REPLIES DECIMAL(19,0) NOT NULL,
    TOTAL_REPLY_SUCCESS DECIMAL(19,0) NOT NULL,
    TOTAL_REPLY_FAULTS DECIMAL(19,0) NOT NULL,
    POLICY_SET_NAME VARCHAR(1024),
    BROKER_NAME VARCHAR(1024) NOT NULL,
    BROKER_UUID VARCHAR(36) NOT NULL,
    EXGRP_NAME VARCHAR(1024) NOT NULL,
    EXGRP_UUID VARCHAR(36) NOT NULL,
    FLOW_DEPLOYED VARCHAR(1) NOT NULL,
    FLOW_NAME VARCHAR(1024) NOT NULL,
    NODE_NAME VARCHAR(1024) NOT NULL,
    OPERATION_NAME VARCHAR(1024) NOT NULL,
    RESET_TIME TIMESTAMP NOT NULL,
    INTERVAL_START_TIME TIMESTAMP NOT NULL,
    INTERVAL_END_TIME TIMESTAMP NOT NULL,
    CHECK (FLOW_DEPLOYED IN ('0','1'))
) IN WSRRTS;

ALTER TABLE SR_WMB_POLICY ADD CONSTRAINT SR_WMB_POLICY_PK
    PRIMARY KEY (GLOBAL_INSTANCE_ID);

ALTER TABLE SR_WMB_POLICY ADD CONSTRAINT SR_WMB_POLICY_FK
    FOREIGN KEY (GLOBAL_INSTANCE_ID)
    REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
    ON DELETE CASCADE;

-- Task Scheduler tables
CREATE TABLE WSRRTASK (
    TASKID BIGINT NOT NULL,
    VERSION VARCHAR(5) NOT NULL,
    ROW_VERSION INTEGER NOT NULL,
    TASKTYPE INTEGER NOT NULL,
    TASKSUSPENDED SMALLINT NOT NULL,
    CANCELLED SMALLINT NOT NULL,
    NEXTFIRETIME BIGINT NOT NULL,
    STARTBYINTERVAL VARCHAR(254),
    STARTBYTIME BIGINT,
    VALIDFROMTIME BIGINT,
    VALIDTOTIME BIGINT,
    REPEATINTERVAL VARCHAR(254),
    MAXREPEATS INTEGER NOT NULL,
    REPEATSLEFT INTEGER NOT NULL,
    TASKINFO BLOB(102400) LOGGED NOT COMPACT,
    NAME VARCHAR(254) NOT NULL,
    AUTOPURGE INTEGER NOT NULL,
    FAILUREACTION INTEGER,
    MAXATTEMPTS INTEGER,
    QOS INTEGER,
    PARTITIONID INTEGER,
    OWNERTOKEN VARCHAR(200) NOT NULL,
    CREATETIME BIGINT NOT NULL
) IN WSRRTS;

ALTER TABLE WSRRTASK ADD PRIMARY KEY (TASKID);

CREATE INDEX WSRRTASK_IDX1 ON WSRRTASK (TASKID, OWNERTOKEN);

CREATE INDEX WSRRTASK_IDX2 ON WSRRTASK (
    NEXTFIRETIME ASC,
    REPEATSLEFT,
    PARTITIONID) CLUSTER;

CREATE TABLE WSRRTREG (
    REGKEY VARCHAR(254) NOT NULL,
    REGVALUE VARCHAR(254)
) IN WSRRTS;

ALTER TABLE WSRRTREG ADD PRIMARY KEY (REGKEY);

CREATE TABLE WSRRLMGR (
    LEASENAME VARCHAR(254) NOT NULL,
    LEASEOWNER VARCHAR(254) NOT NULL,
    LEASE_EXPIRE_TIME  BIGINT,
    DISABLED VARCHAR(5)
) IN WSRRTS;

ALTER TABLE WSRRLMGR ADD PRIMARY KEY (LEASENAME);

CREATE TABLE WSRRLMPR (
    LEASENAME VARCHAR(254) NOT NULL,
    NAME VARCHAR(254) NOT NULL,
    VALUE VARCHAR(254) NOT NULL
) IN WSRRTS;

CREATE INDEX WSRRLMPR_IDX1 ON WSRRLMPR (LEASENAME, NAME);

-- UPGRADE tables
CREATE TABLE UPGRADESTATUSRECORD (
    ID SMALLINT NOT NULL WITH DEFAULT 1,
    COMPONENT INT NOT NULL WITH DEFAULT 0,
    SUBCOMPONENT VARCHAR(1024),
    STATUS INT NOT NULL WITH DEFAULT 0,
    TOTAL BIGINT NOT NULL WITH DEFAULT 0 ,
    PROCESSED BIGINT NOT NULL WITH DEFAULT 0 ,
    PERCENTAGE BIGINT NOT NULL WITH DEFAULT 0,
    CONFIGFILE BLOB (548576),
    COMPONENTINFO BLOB(4096)
) IN WSRRTS;

CREATE TABLE UPGRADEEXCEPTIONS (
    BSRURI VARCHAR(1024) NOT NULL,
    EXCEPTIONTIME TIMESTAMP NOT NULL,
    SEVERITY INT NOT NULL WITH DEFAULT 0,
    COMPONENT INT NOT NULL WITH DEFAULT 0,
    SUBCOMPONENT VARCHAR(1024),
    UPGRADEEXCEPTION BLOB (548576)
) IN WSRRTS;

CREATE TABLE UPGRADEOBJECTHISTORY (
    BSRURI VARCHAR(1024) NOT NULL,
    STATUSTIME TIMESTAMP NOT NULL,
    STATUS VARCHAR(1024) NOT NULL
) IN WSRRTS;

CREATE TABLE UPGRADEOBJECTSTATUS (
    BSRURI VARCHAR(1024) NOT NULL,
    STATUSTIME TIMESTAMP NOT NULL,
    STATUS VARCHAR(1024) NOT NULL
) IN WSRRTS;

CREATE TABLE UPGRADECOMPONENTS (
    COMPONENT INT NOT NULL WITH DEFAULT 0,
    SUBCOMPONENT VARCHAR(1024),
    STARTTIME TIMESTAMP NOT NULL,
    ENDTIME TIMESTAMP,
    DURATION BIGINT NOT NULL WITH DEFAULT 0,
    TOTAL BIGINT NOT NULL WITH DEFAULT 0
) IN WSRRTS;

-- CRE tables
CREATE TABLE CRE_LARGE_CDATA (
    ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
    DATA CLOB(1M) LOGGED NOT COMPACT, 
    PRIMARY KEY (ID)
) IN WSRRUITS;

CREATE TABLE CRE_PAGE (
    ID VARCHAR(254) NOT NULL, 
    PRIMARY KEY (ID)
) IN WSRRUITS;

CREATE TABLE CRE_STATE_ITEM (
    ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
    LOCALE VARCHAR(254), 
    LOCALIZED_VALUE VARCHAR(1000), 
    NAME VARCHAR(254), 
    READ_ONLY SMALLINT, 
    VALUE VARCHAR(1000), 
    STATE_SET_ID VARCHAR(254) NOT NULL, 
    LOCALIZED_VALUE_DATA_ID BIGINT, 
    VALUE_DATA_ID BIGINT, 
    PRIMARY KEY (ID)
) IN WSRRUITS;

CREATE INDEX I_STT_ITM_LOCALIZE ON CRE_STATE_ITEM
    (LOCALIZED_VALUE_DATA_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE INDEX I_STT_ITM_STATESET ON CRE_STATE_ITEM
    (STATE_SET_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE INDEX I_STT_ITM_VALUEDAT ON CRE_STATE_ITEM
    (VALUE_DATA_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE TABLE CRE_STATE_SET (
    ID VARCHAR(254) NOT NULL, 
    DEFINITION_URL VARCHAR(1000), 
    LAST_CONFIG_UPDATED TIMESTAMP, 
    IS_MODE VARCHAR(254), 
    NAME VARCHAR(254), 
    USERNAME VARCHAR(254) NOT NULL,
    WIDGET_ID VARCHAR(254) NOT NULL, 
    PRIMARY KEY (ID),
    CONSTRAINT U_CR_S_ST_USERNAME UNIQUE (USERNAME, WIDGET_ID)
) IN WSRRUITS;

CREATE INDEX I_STATESET ON CRE_STATE_SET
	(DEFINITION_URL, IS_MODE, NAME)
	ALLOW REVERSE SCANS;

CREATE TABLE CRE_WIDGET_INSTANCE (
    ID VARCHAR(254) NOT NULL, 
    DEFINITION_URL VARCHAR(1000), 
    WIDGET_TYPE VARCHAR(254), 
    DOCUMENT_ID VARCHAR(254), 
    HASHED_DOMAIN SMALLINT, 
    PARENT_ID VARCHAR(254), 
    DOM_PLACEMENT VARCHAR(254), 
    RENDER_TYPE VARCHAR(254), 
    PAGE_ID VARCHAR(254) NOT NULL, 
    PRIMARY KEY (ID)
) IN WSRRUITS;

CREATE INDEX I_WDGTTNC_PAGE ON CRE_WIDGET_INSTANCE
    (PAGE_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE TABLE CRE_WIDGET_INSTANCE_CRE_WIRE (
    WIDGETINSTANCE_ID VARCHAR(254), 
    WIRES_ID BIGINT
) IN WSRRUITS;

CREATE INDEX I_WDGT_WR_ELEMENT ON CRE_WIDGET_INSTANCE_CRE_WIRE
    (WIRES_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE INDEX I_WDGT_WR_WIDGETIN ON CRE_WIDGET_INSTANCE_CRE_WIRE
    (WIDGETINSTANCE_ID ASC)
    ALLOW REVERSE SCANS;
    
CREATE TABLE CRE_WIRE (
    ID BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY, 
    SOURCE_EVENT VARCHAR(254), 
    SOURCE_WIDGET VARCHAR(254), 
    TARGET_EVENT VARCHAR(254), 
    TARGET_WIDGET VARCHAR(254), 
    WIDGET_ID VARCHAR(254) NOT NULL, 
    PRIMARY KEY (ID)
) IN WSRRUITS;

CREATE INDEX I_WIRE_WIDGETINSTA ON CRE_WIRE
    (WIDGET_ID ASC)
    ALLOW REVERSE SCANS;
CREATE INDEX I_WIRE_SOURCEWID ON CRE_WIRE
    (SOURCE_WIDGET ASC)
    ALLOW REVERSE SCANS;
CREATE INDEX I_WIRE_TARGETWID ON CRE_WIRE
    (TARGET_WIDGET ASC)
    ALLOW REVERSE SCANS;
    
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (STATE_SET_ID) REFERENCES CRE_STATE_SET (ID);
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (LOCALIZED_VALUE_DATA_ID) REFERENCES CRE_LARGE_CDATA (ID);
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (VALUE_DATA_ID) REFERENCES CRE_LARGE_CDATA (ID);
ALTER TABLE CRE_WIDGET_INSTANCE ADD FOREIGN KEY (PAGE_ID) REFERENCES CRE_PAGE (ID);
ALTER TABLE CRE_WIDGET_INSTANCE_CRE_WIRE ADD FOREIGN KEY (WIDGETINSTANCE_ID) REFERENCES CRE_WIDGET_INSTANCE (ID);
ALTER TABLE CRE_WIDGET_INSTANCE_CRE_WIRE ADD FOREIGN KEY (WIRES_ID) REFERENCES CRE_WIRE (ID);
ALTER TABLE CRE_WIRE ADD FOREIGN KEY (WIDGET_ID) REFERENCES CRE_WIDGET_INSTANCE (ID);
ALTER TABLE CRE_STATE_SET ADD FOREIGN KEY (WIDGET_ID) REFERENCES CRE_WIDGET_INSTANCE (ID);
    
-- UI Persistence Store
CREATE TABLE UIUSER (
	HASH BIGINT NOT NULL GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	NAME VARCHAR(768) NOT NULL,
	LASTVIEWEDVIEW VARCHAR(64),
	LASTVIEWEDPAGE VARCHAR(64),
	ISGROUP SMALLINT NOT NULL DEFAULT 0,
	NOWELCOME SMALLINT NOT NULL DEFAULT 0,
	CONSTRAINT BOOL CHECK(ISGROUP IN (0, 1, 2)),
	CONSTRAINT BOOL2 CHECK(NOWELCOME IN (0, 1)),
	CONSTRAINT NAME_ISGRP UNIQUE (NAME, ISGROUP)
) IN WSRRUITS;

CREATE TABLE USERVIEWPERM (
	USER_ID BIGINT NOT NULL REFERENCES UIUSER (HASH) ON DELETE CASCADE,
	VIEW_ID VARCHAR(64) NOT NULL,
	EDIT SMALLINT NOT NULL,
	PRIMARY KEY (USER_ID, VIEW_ID),
	CONSTRAINT BOOL CHECK(EDIT IN (0, 1))
) IN WSRRUITS;

CREATE INDEX UV_VIEW ON USERVIEWPERM
	(VIEW_ID, USER_ID)
	ALLOW REVERSE SCANS;

CREATE TABLE DEFAULTPERM (
	USER_ID BIGINT NOT NULL REFERENCES UIUSER (HASH) ON DELETE CASCADE,
	EDIT SMALLINT NOT NULL,
	PRIMARY KEY (USER_ID),
	CONSTRAINT BOOL CHECK(EDIT IN (0, 1))
) IN WSRRUITS;
	
CREATE OR REPLACE VIEW USERVIEWPERM_VW AS
	SELECT perm.USER_ID as USER_ID, users.NAME AS NAME, perm.VIEW_ID AS VIEW_ID, perm.EDIT AS EDIT, users.ISGROUP as ISGROUP
	FROM __DBSCHEMA__.USERVIEWPERM perm
	INNER JOIN __DBSCHEMA__.UIUSER users
	ON perm.USER_ID = users.HASH;

CREATE OR REPLACE VIEW DEFAULTPERM_VW AS
	SELECT perm.USER_ID as USER_ID, users.NAME AS NAME, perm.EDIT AS EDIT, users.ISGROUP as ISGROUP
	FROM __DBSCHEMA__.DEFAULTPERM perm
	INNER JOIN __DBSCHEMA__.UIUSER users
	ON perm.USER_ID = users.HASH;
	
CREATE TABLE UISTATUSFLAG (
	NAME VARCHAR(64) NOT NULL PRIMARY KEY,
	STATUS VARCHAR(1000) NOT NULL
) IN WSRRUITS;

CREATE TABLE UIUSERSTORAGE (
	USERNAME VARCHAR(768) NOT NULL,
	USERDATA CLOB(1M), 
	PRIMARY KEY (USERNAME)
) IN WSRRUITS;

INSERT INTO UISTATUSFLAG VALUES ('READONLY','0');
INSERT INTO UISTATUSFLAG VALUES ('SHOWWELCOME','0');
INSERT INTO UIUSER (NAME, LASTVIEWEDVIEW, LASTVIEWEDPAGE, ISGROUP, NOWELCOME) VALUES ('ALL_AUTHENTICATED','','',1,0);
INSERT INTO DEFAULTPERM SELECT MAX(HASH), 0 FROM UIUSER;
INSERT INTO UIUSER (NAME, LASTVIEWEDVIEW, LASTVIEWEDPAGE, ISGROUP, NOWELCOME) VALUES ('WSRRAdmin','','',2,0);
INSERT INTO DEFAULTPERM SELECT MAX(HASH), 1 FROM UIUSER;

GRANT SELECT,INSERT,UPDATE,DELETE ON SR_WMB_POLICY TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_VALDTRPOLICY TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ENTITYACTION TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ASSOCIATED TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ANALYTICS TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ASSERTION TO USER __DBUSER__;

GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRTASK TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRTREG TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRLMGR TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRLMPR TO USER __DBUSER__;

GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADESTATUSRECORD TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEEXCEPTIONS TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEOBJECTHISTORY TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEOBJECTSTATUS TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADECOMPONENTS TO USER __DBUSER__;

GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_LARGE_CDATA TO USER __DBUSER__; 
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_PAGE TO USER __DBUSER__; 
GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_STATE_ITEM TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_STATE_SET TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_WIDGET_INSTANCE TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_WIDGET_INSTANCE_CRE_WIRE TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_WIRE TO USER __DBUSER__;

GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON UIUSER TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON USERVIEWPERM TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON DEFAULTPERM TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UISTATUSFLAG TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON UIUSERSTORAGE TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON USERVIEWPERM_VW TO USER __DBUSER__;
GRANT SELECT,INSERT,UPDATE,DELETE ON DEFAULTPERM_VW TO USER __DBUSER__;

CREATE TABLE VERIFY ( VERIFY VARCHAR(60) ) IN USERSPACE1;
GRANT SELECT,INSERT,DELETE ON VERIFY TO USER __DBUSER__;
