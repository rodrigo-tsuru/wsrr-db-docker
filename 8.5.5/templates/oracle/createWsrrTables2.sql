-- begin_generated_IBM_copyright_prolog

-- Licensed Materials - Property of IBM
-- 
-- 5724-N72 5655-WBS
-- 
-- Copyright IBM Corp. 2006, 2009 All Rights Reserved.
-- 
-- US Government Users Restricted Rights - Use, duplication or
-- disclosure restricted by GSA ADP Schedule Contract with
-- IBM Corp.

-- end_generated_IBM_copyright_prolog

SET SQLT /

ALTER SESSION SET CURRENT_SCHEMA = __DBSCHEMA__/

CREATE TABLE SR_ANALYTICS (
		EVENT BLOB,
		SOURCE_COMPONENT_ID NVARCHAR2(1020),
		REPORTER_COMPONENT_ID NVARCHAR2(1020),
		SITUATION NUMBER(10),
		CREATION_TIME TIMESTAMP(6) NOT NULL ENABLE,
		EXTENSION_NAME NVARCHAR2(1024),
		VERSION NVARCHAR2(16),
		MSG_DATA_ELEMENT_MSGLOCALE NVARCHAR2(11),
		MSG_DATA_ELEMENT_MSGCATLOGTKNS NVARCHAR2(4000),
		MSG_DATA_ELEMENT_MSGID NVARCHAR2(256),
		MSG_DATA_ELEMENT_MSGIDTYPE NVARCHAR2(32),
		MSG_DATA_ELEMENT_MSGCATALOGID NVARCHAR2(128),
		MSG_DATA_ELEMENT_MSGCATLOGTYPE NVARCHAR2(32),
		MSG_DATA_ELEMENT_MSGCATALOG NVARCHAR2(128),
		SITUATION_CATEGORYNAME NVARCHAR2(20) DEFAULT 'ReportSituation',
		SITUATION_REPORTCATEGORY NVARCHAR2(5) DEFAULT 'Log',
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE	)/


ALTER TABLE SR_ANALYTICS ADD CONSTRAINT SR_ANALYTICS_PK
	PRIMARY KEY (GLOBAL_INSTANCE_ID) ENABLE/

CREATE INDEX "SR_ANALYTICS_VER_IDX" ON "SR_ANALYTICS" ("VERSION")/

CREATE TABLE SR_ASSERTION (
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE,
		ASSERTION_TYPE NVARCHAR2(40) NOT NULL ENABLE,
		ASSERTION_ID NVARCHAR2(120),
		ASSERTION_NAME NVARCHAR2(120),
		STATUS CHAR(1) DEFAULT '0' NOT NULL ENABLE)/

ALTER TABLE SR_ASSERTION ADD CONSTRAINT SR_ASSERTION_PK
	PRIMARY KEY (GLOBAL_INSTANCE_ID) ENABLE/

ALTER TABLE SR_ASSERTION ADD CONSTRAINT ASSN_ANYTCS_FK 
	FOREIGN KEY	(GLOBAL_INSTANCE_ID)
	REFERENCES SR_ANALYTICS(GLOBAL_INSTANCE_ID)
	ON DELETE CASCADE/
	
CREATE TABLE SR_ASSOCIATED (
		RESOLVED_RECORD NVARCHAR2(48) NOT NULL ENABLE,
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE	)/

ALTER TABLE SR_ASSOCIATED ADD CONSTRAINT ASSCTD_ANLYTICS_FK 
	FOREIGN KEY (GLOBAL_INSTANCE_ID)
	REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
	ON DELETE CASCADE/

CREATE TABLE SR_ENTITYACTION (
		OPERATION NVARCHAR2(20),
		ENTITY_TYPE NVARCHAR2(1020),
		USERID NVARCHAR2(64),
		ROLE NVARCHAR2(254),
		ENTITY_BSRURI NVARCHAR2(48),
		TRANSITION_URI NVARCHAR2(1020),
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE	)/

ALTER TABLE SR_ENTITYACTION ADD CONSTRAINT SR_ENTITYACTION_PK
	PRIMARY KEY (GLOBAL_INSTANCE_ID) ENABLE/

ALTER TABLE SR_ENTITYACTION ADD CONSTRAINT ENTYUPD_ANYTCS_FK 
	FOREIGN KEY	(GLOBAL_INSTANCE_ID)
	REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
	ON DELETE CASCADE/

CREATE TABLE SR_VALDTRPOLICY (
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE,
		POLICYDOMAIN NVARCHAR2(1020),
		POLICYID NVARCHAR2(1020),
		POLICYCLASS NVARCHAR2(1020),
		STATUS CHAR(1) DEFAULT '0' NOT NULL ENABLE,
		POLICYNAME NVARCHAR2(1020),
		POLICYURI NVARCHAR2(1020),
		CREATION_TIME TIMESTAMP(6) NOT NULL ENABLE )/

ALTER TABLE SR_VALDTRPOLICY ADD CONSTRAINT SR_VALDTRPOLICY_PK
	PRIMARY KEY	(GLOBAL_INSTANCE_ID) ENABLE/

ALTER TABLE SR_VALDTRPOLICY ADD CONSTRAINT VALDPLCY_ANYTCS_FK 
	FOREIGN KEY (GLOBAL_INSTANCE_ID)
	REFERENCES SR_ANALYTICS	(GLOBAL_INSTANCE_ID)
	ON DELETE CASCADE/

CREATE TABLE SR_WMB_POLICY (
		GLOBAL_INSTANCE_ID NVARCHAR2(48) NOT NULL ENABLE,
		TOTAL_RECEIPTS DECIMAL(19,0) NOT NULL ENABLE,
		TOTAL_RECEIPT_SUCCESS DECIMAL(19,0) NOT NULL ENABLE,
		TOTAL_RECEIPT_FAULTS DECIMAL(19,0) NOT NULL ENABLE,
		TOTAL_REPLIES DECIMAL(19,0) NOT NULL ENABLE,
		TOTAL_REPLY_SUCCESS DECIMAL(19,0) NOT NULL ENABLE,
		TOTAL_REPLY_FAULTS DECIMAL(19,0) NOT NULL ENABLE,
		POLICY_SET_NAME NVARCHAR2(1024),
		BROKER_NAME NVARCHAR2(1024) NOT NULL ENABLE,
		BROKER_UUID NVARCHAR2(36) NOT NULL ENABLE,
		EXGRP_NAME NVARCHAR2(1024) NOT NULL ENABLE,
		EXGRP_UUID NVARCHAR2(36) NOT NULL ENABLE,
		FLOW_DEPLOYED NVARCHAR2(1) NOT NULL ENABLE,
		FLOW_NAME NVARCHAR2(1024) NOT NULL ENABLE,
		NODE_NAME NVARCHAR2(1024) NOT NULL ENABLE,
		OPERATION_NAME NVARCHAR2(1024) NOT NULL ENABLE,
		RESET_TIME TIMESTAMP(6) NOT NULL ENABLE,
		INTERVAL_START_TIME TIMESTAMP(6) NOT NULL ENABLE,
		INTERVAL_END_TIME TIMESTAMP(6) NOT NULL ENABLE,
		CHECK (FLOW_DEPLOYED IN ('0','1'))	)/

ALTER TABLE SR_WMB_POLICY ADD CONSTRAINT SR_WMB_POLICY_PK 
	PRIMARY KEY	(GLOBAL_INSTANCE_ID) ENABLE/

ALTER TABLE SR_WMB_POLICY ADD CONSTRAINT ASSN_SR_WMB_POLICY_FK 
	FOREIGN KEY	(GLOBAL_INSTANCE_ID)
	REFERENCES SR_ANALYTICS (GLOBAL_INSTANCE_ID)
	ON DELETE CASCADE/

CREATE TABLE "WSRRTASK"("TASKID" NUMBER(19) NOT NULL,
               "VERSION" VARCHAR2(5) NOT NULL,
               "ROW_VERSION" NUMBER(10) NOT NULL,
               "TASKTYPE" NUMBER(10) NOT NULL,
               "TASKSUSPENDED" NUMBER(1) NOT NULL,
               "CANCELLED" NUMBER(10) NOT NULL,
               "NEXTFIRETIME" NUMBER(19) NOT NULL,
               "STARTBYINTERVAL" VARCHAR2(254),
               "STARTBYTIME" NUMBER(19),
               "VALIDFROMTIME" NUMBER(19),
               "VALIDTOTIME" NUMBER(19),
               "REPEATINTERVAL" VARCHAR2(254),
               "MAXREPEATS" NUMBER(10) NOT NULL,
               "REPEATSLEFT" NUMBER(10) NOT NULL,
               "TASKINFO" BLOB,
               "NAME" VARCHAR2(254),
               "AUTOPURGE" NUMBER(10) NOT NULL,
               "FAILUREACTION" NUMBER(10),
               "MAXATTEMPTS" NUMBER(10),
               "QOS" NUMBER(10),
               "PARTITIONID" NUMBER(10),
               "OWNERTOKEN" VARCHAR2(200) NOT NULL,
               "CREATETIME" NUMBER(19) NOT NULL,
               PRIMARY KEY ("TASKID") )/
CREATE INDEX "WSRRTASK_IDX1" ON "WSRRTASK" ("TASKID",
              "OWNERTOKEN") /
CREATE INDEX "WSRRTASK_IDX2" ON "WSRRTASK" ("NEXTFIRETIME" ASC,
               "REPEATSLEFT",
               "PARTITIONID") /
CREATE TABLE "WSRRTREG" ("REGKEY" VARCHAR2(254) NOT NULL ,
               "REGVALUE" VARCHAR2(254) ,
               PRIMARY KEY ( "REGKEY" ))/
CREATE TABLE "WSRRLMGR" ("LEASENAME" VARCHAR2(254) NOT NULL,
               "LEASEOWNER" VARCHAR2(254),
               "LEASE_EXPIRE_TIME" NUMBER(19),
               "DISABLED" VARCHAR2(254),
               PRIMARY KEY ( "LEASENAME" ))/
CREATE TABLE "WSRRLMPR" ("LEASENAME" VARCHAR2(254) NOT NULL,
               "NAME" VARCHAR2(254) NOT NULL,
               "VALUE" VARCHAR2(254) NOT NULL )/
CREATE INDEX "WSRRLMPR_IDX1" ON "WSRRLMPR" ("LEASENAME",
               "NAME") /

GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRTASK TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRTREG TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRLMGR TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON WSRRLMPR TO __DBUSER__/

------------------
-- UPGRADE tables
------------------
CREATE TABLE UPGRADESTATUSRECORD  (
		  ID NUMBER(10) DEFAULT '1' NOT NULL ENABLE,
		  COMPONENT NUMBER(10) DEFAULT '0' NOT NULL ENABLE, 
		  SUBCOMPONENT VARCHAR(1024),
		  STATUS NUMBER(10) DEFAULT '0' NOT NULL ENABLE,  
		  TOTAL NUMBER(19) DEFAULT '0' NOT NULL ENABLE, 
		  PROCESSED NUMBER(19) DEFAULT '0' NOT NULL ENABLE, 
		  PERCENTAGE NUMBER(19) DEFAULT '0' NOT NULL ENABLE,   
		  CONFIGFILE BLOB,
		  COMPONENTINFO BLOB )/

CREATE TABLE UPGRADEEXCEPTIONS (
		  BSRURI NVARCHAR2(1024) NOT NULL ENABLE,
		  EXCEPTIONTIME TIMESTAMP(6) NOT NULL ENABLE,
		  SEVERITY NUMBER(10) DEFAULT '0' NOT NULL ENABLE, 
		  COMPONENT NUMBER(10) DEFAULT '0' NOT NULL ENABLE, 
		  SUBCOMPONENT NVARCHAR2(1024),
		  UPGRADEEXCEPTION BLOB )/
		
CREATE TABLE UPGRADEOBJECTHISTORY (
		  BSRURI NVARCHAR2(1024) NOT NULL ENABLE,
		  STATUSTIME TIMESTAMP(6) NOT NULL ENABLE,
		  STATUS NVARCHAR2(1024) NOT NULL ENABLE )/
		
CREATE TABLE UPGRADEOBJECTSTATUS (
		  BSRURI NVARCHAR2(1024) NOT NULL ENABLE,
		  STATUSTIME TIMESTAMP(6) NOT NULL ENABLE,
		  STATUS NVARCHAR2(1024) NOT NULL ENABLE )/

CREATE TABLE UPGRADECOMPONENTS (
		  COMPONENT NUMBER(10) DEFAULT '0' NOT NULL ENABLE, 
		  SUBCOMPONENT NVARCHAR2(1024),
		  STARTTIME TIMESTAMP(6) NOT NULL ENABLE,
		  ENDTIME TIMESTAMP(6),
		  DURATION NUMBER(19) DEFAULT '0' NOT NULL ENABLE, 
		  TOTAL NUMBER(19) DEFAULT '0' NOT NULL ENABLE )/

-- CRE Tables
CREATE TABLE CRE_LARGE_CDATA (
    ID NUMBER NOT NULL ENABLE, 
    DATA CLOB, 
    PRIMARY KEY (ID) )/
    
CREATE SEQUENCE SEQ_CRE_LARGE_CDATA_ID MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE /
GRANT SELECT,ALTER ON SEQ_CRE_LARGE_CDATA_ID TO __DBUSER__/

CREATE TRIGGER CRE_LARGE_CDATA_TRIGGER BEFORE INSERT ON CRE_LARGE_CDATA
       FOR EACH ROW BEGIN
       SELECT __DBSCHEMA__.SEQ_CRE_LARGE_CDATA_ID.nextval INTO :new.ID FROM DUAL;
       END CRE_LARGE_CDATA_TRIGGER;
       /


CREATE TABLE CRE_PAGE (
    ID NVARCHAR2(255) NOT NULL ENABLE, 
    PRIMARY KEY (ID) )/

CREATE TABLE CRE_STATE_ITEM (
    ID NUMBER NOT NULL ENABLE, 
    LOCALE NVARCHAR2(255), 
    LOCALIZED_VALUE NVARCHAR2(1000), 
    NAME NVARCHAR2(255), 
    READ_ONLY NUMBER, 
    VALUE NVARCHAR2(1000), 
    STATE_SET_ID NVARCHAR2(255) NOT NULL ENABLE, 
    LOCALIZED_VALUE_DATA_ID NUMBER, 
    VALUE_DATA_ID NUMBER,
    PRIMARY KEY (ID)
)/

CREATE SEQUENCE SEQ_CRE_STATE_ITEM_ID MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE /
GRANT SELECT,ALTER ON SEQ_CRE_STATE_ITEM_ID TO __DBUSER__/

CREATE TRIGGER CRE_STATE_ITEM_TRIGGER BEFORE INSERT ON CRE_STATE_ITEM
       FOR EACH ROW BEGIN
       SELECT __DBSCHEMA__.SEQ_CRE_STATE_ITEM_ID.nextval INTO :new.ID FROM DUAL;
       END CRE_STATE_ITEM_TRIGGER;
       /

CREATE INDEX "I_STT_ITM_LOCALIZE" ON "CRE_STATE_ITEM"
    ("LOCALIZED_VALUE_DATA_ID" ASC)/
    
CREATE INDEX "I_STT_ITM_STATESET" ON "CRE_STATE_ITEM"
    ("STATE_SET_ID" ASC)/
    
CREATE INDEX "I_STT_ITM_VALUEDAT" ON "CRE_STATE_ITEM"
    ("VALUE_DATA_ID" ASC)/

CREATE TABLE CRE_STATE_SET (
	ID NVARCHAR2(255) NOT NULL ENABLE, 
	DEFINITION_URL NVARCHAR2(1000) , 
	LAST_CONFIG_UPDATED TIMESTAMP , 
	IS_MODE NVARCHAR2(255) , 
	NAME NVARCHAR2(255) , 
	USERNAME NVARCHAR2(255) NOT NULL ENABLE, 
	WIDGET_ID NVARCHAR2(255) NOT NULL ENABLE, 
	PRIMARY KEY (ID) , 
	CONSTRAINT U_CR_S_ST_USERNAME UNIQUE (USERNAME, WIDGET_ID) DEFERRABLE
)/

CREATE INDEX "I_STATESET" ON "CRE_STATE_SET"
	("DEFINITION_URL", "IS_MODE", "NAME")/

CREATE TABLE CRE_WIDGET_INSTANCE (
    ID NVARCHAR2(256) NOT NULL ENABLE, 
    DEFINITION_URL NVARCHAR2(1000) , 
    WIDGET_TYPE NVARCHAR2(255) , 
    DOCUMENT_ID NVARCHAR2(255) , 
    HASHED_DOMAIN NUMBER , 
    PARENT_ID NVARCHAR2(255) , 
    DOM_PLACEMENT NVARCHAR2(255) , 
    RENDER_TYPE NVARCHAR2(255) , 
    PAGE_ID NVARCHAR2(255) NOT NULL ENABLE, 
    PRIMARY KEY (ID)
)/

CREATE INDEX "I_WDGTTNC_PAGE" ON "CRE_WIDGET_INSTANCE"
    ("PAGE_ID" ASC)/
    
CREATE TABLE CRE_WIDGET_INSTANCE_CRE_WIRE (
    WIDGETINSTANCE_ID NVARCHAR2(256) , 
    WIRES_ID NUMBER
)/

CREATE INDEX "I_WDGT_WR_ELEMENT" ON "CRE_WIDGET_INSTANCE_CRE_WIRE"
    ("WIRES_ID" ASC)/
    
CREATE INDEX "I_WDGT_WR_WIDGETIN" ON "CRE_WIDGET_INSTANCE_CRE_WIRE"
    ("WIDGETINSTANCE_ID" ASC)/
    
CREATE TABLE CRE_WIRE (
    ID NUMBER NOT NULL ENABLE, 
    SOURCE_EVENT NVARCHAR2(255) , 
    SOURCE_WIDGET NVARCHAR2(255) , 
    TARGET_EVENT NVARCHAR2(255) , 
    TARGET_WIDGET NVARCHAR2(255) , 
    WIDGET_ID NVARCHAR2(255) NOT NULL ENABLE, 
    PRIMARY KEY (ID)
)/

CREATE SEQUENCE SEQ_CRE_WIRE_ID MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE /
GRANT SELECT,ALTER ON SEQ_CRE_WIRE_ID TO __DBUSER__/

CREATE TRIGGER CRE_WIRE_TRIGGER BEFORE INSERT ON CRE_WIRE
       FOR EACH ROW BEGIN
       SELECT __DBSCHEMA__.SEQ_CRE_WIRE_ID.nextval INTO :new.ID FROM DUAL;
       END CRE_WIRE_TRIGGER;
       /

CREATE INDEX "I_WIRE_WIDGETINSTA" ON "CRE_WIRE"
    ("WIDGET_ID" ASC)/
CREATE INDEX "I_WIRE_SOURCEWID" ON "CRE_WIRE"
    ("SOURCE_WIDGET" ASC)/
CREATE INDEX "I_WIRE_TARGETWID" ON "CRE_WIRE"
    ("TARGET_WIDGET" ASC)/
    
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (STATE_SET_ID) REFERENCES CRE_STATE_SET (ID) DEFERRABLE/
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (LOCALIZED_VALUE_DATA_ID) REFERENCES CRE_LARGE_CDATA (ID) DEFERRABLE/
ALTER TABLE CRE_STATE_ITEM ADD FOREIGN KEY (VALUE_DATA_ID) REFERENCES CRE_LARGE_CDATA (ID) DEFERRABLE/
ALTER TABLE CRE_WIDGET_INSTANCE ADD FOREIGN KEY (PAGE_ID) REFERENCES CRE_PAGE (ID) DEFERRABLE/
ALTER TABLE CRE_WIDGET_INSTANCE_CRE_WIRE ADD FOREIGN KEY (WIDGETINSTANCE_ID) REFERENCES CRE_WIDGET_INSTANCE (ID) DEFERRABLE/
ALTER TABLE CRE_WIDGET_INSTANCE_CRE_WIRE ADD FOREIGN KEY (WIRES_ID) REFERENCES CRE_WIRE (ID) DEFERRABLE/
ALTER TABLE CRE_WIRE ADD FOREIGN KEY (WIDGET_ID) REFERENCES CRE_WIDGET_INSTANCE (ID) DEFERRABLE/
ALTER TABLE CRE_STATE_SET ADD FOREIGN KEY (WIDGET_ID) REFERENCES CRE_WIDGET_INSTANCE (ID) DEFERRABLE/

-- UI Persistence Store
CREATE TABLE UIUSER (
    HASH NUMBER(*,0), 
    NAME NVARCHAR2(768), 
    LASTVIEWEDPAGE NVARCHAR2(64),  
    LASTVIEWEDVIEW NVARCHAR2(64),
	ISGROUP NUMBER,
	NOWELCOME NUMBER,
	PRIMARY KEY (HASH),
	CONSTRAINT NAME_ISGRP UNIQUE (NAME, ISGROUP) DEFERRABLE 
)/
	
ALTER TABLE UIUSER ADD CONSTRAINT UIUSER_BOOL 
	CHECK(ISGROUP IN (0, 1, 2)) ENABLE/

ALTER TABLE UIUSER ADD CONSTRAINT UIUSER_BOOL2 
	CHECK(NOWELCOME IN (0, 1)) ENABLE/

CREATE SEQUENCE SEQ_UIUSER_HASH MINVALUE 1 NOMAXVALUE INCREMENT BY 1 START WITH 1 CACHE 20 NOORDER NOCYCLE /
GRANT SELECT,ALTER ON SEQ_UIUSER_HASH TO __DBUSER__/

CREATE TABLE UISTATUSFLAG (
    NAME NVARCHAR2(64) NOT NULL ENABLE, 
    STATUS NVARCHAR2(1000), 
    PRIMARY KEY (NAME)
)/

INSERT INTO UISTATUSFLAG VALUES ('READONLY','0')/
INSERT INTO UISTATUSFLAG VALUES ('SHOWWELCOME','0')/

CREATE TABLE UIUSERSTORAGE (
	USERNAME NVARCHAR2(768) NOT NULL,
	USERDATA CLOB,
	PRIMARY KEY (USERNAME)
)/

CREATE TABLE USERVIEWPERM (
    USER_ID NUMBER NOT NULL ENABLE, 
    VIEW_ID NVARCHAR2(64) NOT NULL ENABLE, 
    EDIT NUMBER, 
    PRIMARY KEY (USER_ID, VIEW_ID)
)/

ALTER TABLE USERVIEWPERM ADD CONSTRAINT UVPERM_BOOL 
	CHECK(EDIT IN (0, 1)) ENABLE/

CREATE INDEX "UV_VIEW" ON "USERVIEWPERM"
    ("VIEW_ID", "USER_ID")/

ALTER TABLE USERVIEWPERM ADD FOREIGN KEY (USER_ID) REFERENCES UIUSER (HASH) ON DELETE CASCADE DEFERRABLE/

CREATE OR REPLACE VIEW USERVIEWPERM_VW AS
	SELECT perm.USER_ID as USER_ID, users.NAME AS NAME, perm.VIEW_ID AS VIEW_ID, perm.EDIT AS EDIT, users.ISGROUP as ISGROUP
	FROM __DBSCHEMA__.USERVIEWPERM perm
	INNER JOIN __DBSCHEMA__.UIUSER users
	ON perm.USER_ID = users.HASH/

CREATE TRIGGER UIUSER_TRIGGER BEFORE INSERT ON UIUSER
       FOR EACH ROW BEGIN
       SELECT __DBSCHEMA__.SEQ_UIUSER_HASH.nextval INTO :new.HASH FROM DUAL;
       END UIUSER_TRIGGER;
       /

CREATE TABLE DEFAULTPERM (
    USER_ID NUMBER NOT NULL ENABLE, 
    EDIT NUMBER, 
    PRIMARY KEY (USER_ID)
)/

ALTER TABLE DEFAULTPERM ADD CONSTRAINT DEFPERM_BOOL 
	CHECK(EDIT IN (0, 1)) ENABLE/

ALTER TABLE DEFAULTPERM ADD FOREIGN KEY (USER_ID) REFERENCES UIUSER (HASH) ON DELETE CASCADE DEFERRABLE/

INSERT INTO UIUSER (HASH, NAME, LASTVIEWEDVIEW, LASTVIEWEDPAGE, ISGROUP, NOWELCOME) VALUES (SEQ_UIUSER_HASH.nextval, 'ALL_AUTHENTICATED','','',1,0)/
INSERT INTO DEFAULTPERM SELECT MAX(HASH), 0 FROM UIUSER/
INSERT INTO UIUSER (HASH, NAME, LASTVIEWEDVIEW, LASTVIEWEDPAGE, ISGROUP, NOWELCOME) VALUES (SEQ_UIUSER_HASH.nextval, 'WSRRAdmin','','',2,0)/
INSERT INTO DEFAULTPERM SELECT MAX(HASH), 1 FROM UIUSER/

CREATE OR REPLACE VIEW DEFAULTPERM_VW AS
	SELECT perm.USER_ID as USER_ID, users.NAME AS NAME, perm.EDIT AS EDIT, users.ISGROUP as ISGROUP
	FROM __DBSCHEMA__.DEFAULTPERM perm
	INNER JOIN __DBSCHEMA__.UIUSER users
	ON perm.USER_ID = users.HASH/
       
GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_LARGE_CDATA TO __DBUSER__/ 
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_PAGE TO __DBUSER__/ 
GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_STATE_ITEM TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_STATE_SET TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_WIDGET_INSTANCE TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON CRE_WIDGET_INSTANCE_CRE_WIRE TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON CRE_WIRE TO __DBUSER__/

GRANT SELECT,INSERT,UPDATE,DELETE,ALTER ON UIUSER          TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON USERVIEWPERM    TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON DEFAULTPERM    TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UISTATUSFLAG  TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UIUSERSTORAGE TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON USERVIEWPERM_VW TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON DEFAULTPERM_VW TO __DBUSER__/
		  
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_WMB_POLICY TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_VALDTRPOLICY TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ENTITYACTION TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ASSOCIATED TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ANALYTICS TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON SR_ASSERTION TO __DBUSER__/

GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADESTATUSRECORD TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEEXCEPTIONS TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEOBJECTHISTORY TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADEOBJECTSTATUS TO __DBUSER__/
GRANT SELECT,INSERT,UPDATE,DELETE ON UPGRADECOMPONENTS TO __DBUSER__/

CREATE TABLE VERIFY ( VERIFY VARCHAR(60) )/

GRANT SELECT,INSERT,DELETE ON VERIFY TO __DBUSER__/
